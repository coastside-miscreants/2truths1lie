document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM fully loaded and parsed");

    // --- DOM Elements ---
    const statementsContainer = document.getElementById("statements-container");
    const feedbackArea = document.getElementById("feedback-area");
    const feedbackText = document.getElementById("feedback-text");
    const explanationsContainer = document.getElementById("explanations");
    const nextRoundButton = document.getElementById("next-round-button");
    const correctScoreSpan = document.getElementById("correct-score");
    const incorrectScoreSpan = document.getElementById("incorrect-score");
    const roundsPlayedSpan = document.getElementById("rounds-played");
    const flashFeedback = document.getElementById("flash-feedback"); // Get the flash element
    
    // Add loading indicator styles to the page
    const loadingStyles = document.createElement("style");
    loadingStyles.textContent = `
        .loading-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: var(--accent-blue);
            padding: 30px 20px;
            font-family: "Bangers", cursive;
            letter-spacing: 1px;
        }
        
        .loading-content p {
            margin-top: 15px;
            font-size: 1.3em;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(29, 53, 87, 0.3);
            border-radius: 50%;
            border-top-color: var(--accent-blue);
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .statement-placeholder.error {
            color: var(--secondary-red);
            font-weight: bold;
            border: 2px dashed var(--secondary-red);
            border-radius: 5px;
            background-color: rgba(249, 87, 56, 0.1);
            padding: 20px;
        }
    `;
    document.head.appendChild(loadingStyles);

    console.log("DOM elements retrieved");

    // --- Game State ---
    let currentStatements = [];
    let correctScore = 0;
    let incorrectScore = 0;
    let roundsPlayed = 0;
    let gameInProgress = false; // To prevent multiple clicks during feedback
    let eventSource = null; // For SSE connection

    console.log("Initial game state set");

    // --- Core Functions ---
    function connectSSE() {
        console.log("Attempting to connect to SSE endpoint...");
        if (eventSource) {
            console.log("Closing existing SSE connection.");
            eventSource.close();
        }
        // Use the correct port that matches the server
        const baseUrl = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
            ? `http://${window.location.hostname}:3002` 
            : '';
        eventSource = new EventSource(`${baseUrl}/api/game_stream`);

        eventSource.onopen = function() {
            console.log("SSE connection opened successfully.");
            // Game now starts automatically on the server when client connects
            // Prepare UI for incoming round
            showLoadingIndicator(); // Show the loading indicator with spinner
            feedbackArea.classList.add("hidden");
            nextRoundButton.classList.add("hidden");
            flashFeedback.classList.add("hidden");
            flashFeedback.classList.remove("flashing", "flash-correct", "flash-incorrect");
            gameInProgress = true;
            console.log("Waiting for server to automatically generate first round...");
        };

        eventSource.onmessage = function(event) {
            console.log("SSE message received:", event.data);
            try {
                const data = JSON.parse(event.data);
                if (data.type === "new_round") {
                    handleNewRoundData(data.payload);
                } else if (data.type === "error") {
                    handleServerError(data.message);
                } else {
                    console.warn("Received unknown SSE message type:", data.type);
                }
            } catch (error) {
                console.error("Error parsing SSE message:", error, "Raw data:", event.data);
                handleServerError("Received invalid data from server.");
            }
        };

        eventSource.onerror = function(error) {
            console.error("SSE connection error:", error);
            statementsContainer.innerHTML = 
                `<div class="statement-placeholder error">Connection to game server lost. Please refresh the page to try again.</div>`;
            gameInProgress = false;
            if (eventSource) eventSource.close();
        };
    }

    function showLoadingIndicator() {
        console.log("Showing Claude API loading indicator");
        statementsContainer.innerHTML = `
            <div class="loading-content">
                <div class="spinner"></div>
                <p>The gerbils in F*ckchops mind are thinking hard...</p>
            </div>
        `;
    }
    
    function hideLoadingIndicator() {
        console.log("Hiding Claude API loading indicator");
        // This doesn't need to do anything as we'll replace the content
        // when the data arrives
    }

    function requestNewRound() {
        console.log("Requesting new round from server...");
        feedbackArea.classList.add("hidden");
        nextRoundButton.classList.add("hidden");
        flashFeedback.classList.add("hidden"); // Ensure flash is hidden on new round
        flashFeedback.classList.remove("flashing", "flash-correct", "flash-incorrect"); // Clean up classes
        gameInProgress = true;
        
        // Show loading indicator for Claude API call
        showLoadingIndicator();

        fetch("/api/trigger_new_round")
            .then(response => {
                if (!response.ok) {
                    console.error("Failed to trigger new round generation on server.");
                    statementsContainer.innerHTML = `
                        <div class="statement-placeholder error">Failed to trigger new round generation. Please try again.</div>
                    `;
                }
            })
            .catch(error => {
                console.error("Error triggering new round:", error);
                statementsContainer.innerHTML = `
                    <div class="statement-placeholder error">Error connecting to server: ${error.message}</div>
                `;
            });
    }

    function handleNewRoundData(data) {
        console.log("Processing new round data:", data);
        // Hide the loading indicator once we receive data from Claude
        hideLoadingIndicator();
        
        if (!data.statements || data.statements.length !== 3) {
            console.error("Invalid new round data format received:", data);
            handleServerError("Received invalid round data from server.");
            return;
        }
        currentStatements = data.statements;
        displayStatements();
    }

    function handleServerError(errorMessage) {
        console.error("Server error reported:", errorMessage);
        // Hide the loading indicator on error
        hideLoadingIndicator();
        
        statementsContainer.innerHTML = 
            `<div class="statement-placeholder error">Oops! Couldn't load the next round. Server error: ${errorMessage}</div>`;
        gameInProgress = false;
    }

    function displayStatements() {
        console.log("Displaying statements:", currentStatements);
        statementsContainer.innerHTML = "";
        const shuffledStatements = [...currentStatements].sort(() => Math.random() - 0.5);
        console.log("Shuffled statements for display:", shuffledStatements);

        shuffledStatements.forEach((statement) => {
            const buttonContainer = document.createElement("div");
            buttonContainer.classList.add("statement-container");
            buttonContainer.style.position = "relative"; // For positioning the overlay
            
            const button = document.createElement("button");
            button.classList.add("statement-button");
            button.textContent = statement.text;
            button.dataset.statementText = statement.text;
            button.addEventListener("click", handleStatementClick);
            
            // Create an overlay for feedback that will be shown later
            const overlay = document.createElement("div");
            overlay.classList.add("statement-overlay");
            overlay.style.position = "absolute";
            overlay.style.top = "0";
            overlay.style.left = "0";
            overlay.style.width = "100%";
            overlay.style.height = "100%";
            overlay.style.display = "flex";
            overlay.style.justifyContent = "center";
            overlay.style.alignItems = "center";
            overlay.style.borderRadius = "5px";
            overlay.style.opacity = "0";
            overlay.style.transition = "opacity 0.3s ease";
            overlay.style.pointerEvents = "none"; // Don't block button clicks
            overlay.style.zIndex = "5";
            overlay.style.textTransform = "uppercase";
            overlay.style.fontFamily = '"Bangers", cursive';
            overlay.style.fontSize = "2.5em";
            overlay.style.color = "var(--primary-yellow)";
            overlay.style.textShadow = "2px 2px 0px var(--neutral-black)";
            
            // The text will be set when clicked
            
            buttonContainer.appendChild(button);
            buttonContainer.appendChild(overlay);
            statementsContainer.appendChild(buttonContainer);
        });
        console.log("Statement buttons added to DOM.");
    }

    // --- Function to trigger flashing feedback ---
    function triggerFlashFeedback(isCorrect) {
        const message = isCorrect ? "You are smart AF!" : "You are dumb AF!";
        const cssClass = isCorrect ? "flash-correct" : "flash-incorrect";
        console.log(`Triggering flash feedback: ${message}`);

        flashFeedback.textContent = message;
        // Reset classes before adding new ones
        flashFeedback.className = "hidden"; // Start hidden
        // Use requestAnimationFrame to ensure classes are applied after reset
        requestAnimationFrame(() => {
            flashFeedback.classList.remove("hidden");
            flashFeedback.classList.add(cssClass, "flashing");
        });

        // Remove the flashing class after animation completes (3 flashes * 0.4s = 1.2s)
        // Add a small buffer
        setTimeout(() => {
            flashFeedback.classList.remove("flashing");
            flashFeedback.classList.add("hidden"); // Hide it again
            console.log("Flash feedback animation complete.");
        }, 1300); // 1.3 seconds
    }

    function showStatementFeedback(button, isCorrect) {
        // Find the button's parent container and the overlay inside it
        const container = button.parentElement;
        const overlay = container.querySelector(".statement-overlay");
        
        // Set up the overlay with feedback
        overlay.textContent = isCorrect ? "CORRECT!" : "WRONG!";
        overlay.className = "statement-overlay " + (isCorrect ? "correct" : "incorrect");
        
        // Set background colors
        if (isCorrect) {
            overlay.style.backgroundColor = "rgba(40, 167, 69, 0.85)"; // Green with opacity
        } else {
            overlay.style.backgroundColor = "rgba(249, 87, 56, 0.85)"; // Red with opacity
        }
        
        // Show the overlay
        overlay.style.opacity = "1";
    }

    function handleStatementClick(event) {
        console.log("Statement button clicked:", event.target.textContent);
        if (!gameInProgress) {
            console.warn("Statement clicked but game is not in progress. Ignoring.");
            return;
        }

        gameInProgress = false;
        roundsPlayed++;
        console.log(`Round ${roundsPlayed} ended.`);

        const selectedButton = event.target;
        const selectedText = selectedButton.dataset.statementText;
        const selectedStatement = currentStatements.find(s => s.text === selectedText);

        if (!selectedStatement) {
            console.error("Could not find selected statement data for text:", selectedText);
            return;
        }
        console.log("Selected statement object:", selectedStatement);

        // Disable all buttons and highlight the selected one
        document.querySelectorAll(".statement-button").forEach(btn => {
            btn.disabled = true;
            btn.style.cursor = "default";
            if (btn === selectedButton) {
                btn.style.borderWidth = "4px";
                console.log("Highlighting selected button.");
            }
        });
        console.log("All statement buttons disabled.");

        let wasCorrect = false;
        if (selectedStatement.isLie) {
            console.log("Correct guess!");
            feedbackText.textContent = "Correct! You found the lie!";
            feedbackText.className = "correct";
            correctScore++;
            wasCorrect = true;
        } else {
            console.log("Incorrect guess.");
            feedbackText.textContent = "Incorrect! That was actually true.";
            feedbackText.className = "incorrect";
            incorrectScore++;
            wasCorrect = false;
        }

        // Show feedback on the clicked statement button
        showStatementFeedback(selectedButton, wasCorrect);

        // Show feedback on all other statement buttons
        document.querySelectorAll(".statement-button").forEach(btn => {
            if (btn !== selectedButton) {
                const btnText = btn.dataset.statementText;
                const statement = currentStatements.find(s => s.text === btnText);
                if (statement) {
                    // Show if this was the lie (when user picked wrong)
                    if (statement.isLie) {
                        showStatementFeedback(btn, true); // This was the actual lie
                    }
                }
            }
        });

        // Trigger the flashing feedback
        triggerFlashFeedback(wasCorrect);

        displayExplanations();
        updateScoreboard();

        feedbackArea.classList.remove("hidden");
        nextRoundButton.classList.remove("hidden");
        console.log("Feedback and next round button displayed.");
    }

    function displayExplanations() {
        console.log("Displaying explanations.");
        explanationsContainer.innerHTML = "";
        currentStatements.forEach(statement => {
            const p = document.createElement("p");
            const explanationClass = statement.isLie ? "false-explanation" : "true-explanation";
            const type = statement.isLie ? "Lie" : "Truth";
            p.classList.add(explanationClass);
            p.innerHTML = `<strong>${type}:</strong> ${statement.text}<br><em>${statement.explanation}</em>`;
            explanationsContainer.appendChild(p);
        });
    }

    function updateScoreboard() {
        console.log(`Updating scoreboard: Correct=${correctScore}, Incorrect=${incorrectScore}, Rounds=${roundsPlayed}`);
        correctScoreSpan.textContent = correctScore;
        incorrectScoreSpan.textContent = incorrectScore;
        roundsPlayedSpan.textContent = roundsPlayed;
    }

    // --- Event Listeners ---
    nextRoundButton.addEventListener("click", () => {
        console.log("Next Round button clicked.");
        requestNewRound();
    });

    // --- Initial Load ---
    console.log("Initiating SSE connection...");
    // Show the loading indicator while waiting for initial round
    showLoadingIndicator();
    connectSSE(); 
});